d3.sankey=function(){var sankey={},nodeWidth=24,nodePadding=8,size=[1,1],nodes=[],links=[];sankey.nodeWidth=function(_){if(!arguments.length)return nodeWidth;nodeWidth=+_;return sankey;};sankey.nodePadding=function(_){if(!arguments.length)return nodePadding;nodePadding=+_;return sankey;};sankey.nodes=function(_){if(!arguments.length)return nodes;nodes=_;return sankey;};sankey.links=function(_){if(!arguments.length)return links;links=_;return sankey;};sankey.size=function(_){if(!arguments.length)return size;size=_;return sankey;};sankey.layout=function(iterations){computeNodeLinks();computeNodeValues();computeNodeDepths();computeNodeBreadths(iterations);computeLinkDepths();return sankey;};sankey.relayout=function(){computeLinkDepths();return sankey;};sankey.link=function(){var curvature=.5;function link(d){var x0=d.source.x+d.sy+d.dy/2,x1=d.target.x+d.ty+d.dy/2,y0=d.source.y+nodeWidth,y1=d.target.y,yi=d3.interpolateNumber(y0,y1),y2=yi(curvature),y3=yi(1-curvature);return "M"+x0+","+y0
+"C"+x0+","+y2
+" "+x1+","+y3
+" "+x1+","+y1;}
link.curvature=function(_){if(!arguments.length)return curvature;curvature=+_;return link;};return link;};function computeNodeLinks(){nodes.forEach(function(node){node.sourceLinks=[];node.targetLinks=[];});links.forEach(function(link){var source=link.source,target=link.target;if(typeof source==="number")source=link.source=nodes[link.source];if(typeof target==="number")target=link.target=nodes[link.target];source.sourceLinks.push(link);target.targetLinks.push(link);});}
function computeNodeValues(){nodes.forEach(function(node){node.value=Math.max(d3.sum(node.sourceLinks,value),d3.sum(node.targetLinks,value));});}
function computeNodeBreadths(iterations){var nodesByBreadth=d3.nest().key(function(d){return d.y;}).sortKeys(d3.ascending).entries(nodes).map(function(d){return d.values;});var ky=(size[0]-(nodesByBreadth[0].length-1)*nodePadding)/d3.sum(nodesByBreadth[0],value);nodesByBreadth.forEach(function(nodes){nodes.forEach(function(node,i){node.x=i;node.dy=node.value*ky;});});links.forEach(function(link){link.dy=link.value*ky;});resolveCollisions();for(var alpha=1;iterations>0;--iterations){relaxLeftToRight(alpha);resolveCollisions();relaxRightToLeft(alpha*=.99);resolveCollisions();}
function relaxLeftToRight(alpha){nodesByBreadth.forEach(function(nodes,breadth){nodes.forEach(function(node){if(node.targetLinks.length){var y=d3.sum(node.targetLinks,weightedSource)/d3.sum(node.targetLinks,value);node.x+=(y-center(node))*alpha;}});});function weightedSource(link){return center(link.source)*link.value;}}
function relaxRightToLeft(alpha){nodesByBreadth.slice().reverse().forEach(function(nodes){nodes.forEach(function(node){if(node.sourceLinks.length){var y=d3.sum(node.sourceLinks,weightedTarget)/d3.sum(node.sourceLinks,value);node.x+=(y-center(node))*alpha;}});});function weightedTarget(link){return center(link.target)*link.value;}}
function resolveCollisions(){nodesByBreadth.forEach(function(nodes){var node,dy,x0=0,n=nodes.length,i;nodes.sort(ascendingDepth);for(i=0;i<n;++i){node=nodes[i];dy=x0-node.x;if(dy>0)node.x+=dy;x0=node.x+node.dy+nodePadding;}
dy=x0-nodePadding-size[0];if(dy>0){x0=node.x-=dy;for(i=n-2;i>=0;--i){node=nodes[i];dy=node.x+node.dy+nodePadding-x0;if(dy>0)node.x-=dy;x0=node.x;}}});}
function ascendingDepth(a,b){return b.x-a.x;}}
function moveSinksDown(y){nodes.forEach(function(node){if(!node.sourceLinks.length){node.y=y-1;}});}
function scaleNodeBreadths(kx){nodes.forEach(function(node){node.y*=kx;});}
function computeNodeDepths(){var remainingNodes=nodes,nextNodes,y=0;while(remainingNodes.length){nextNodes=[];remainingNodes.forEach(function(node){node.y=y;node.sourceLinks.forEach(function(link){if(nextNodes.indexOf(link.target)<0){nextNodes.push(link.target);}});});remainingNodes=nextNodes;++y;}
moveSinksDown(y);scaleNodeBreadths((size[1]-nodeWidth)/(y-1));}
function computeLinkDepths(){nodes.forEach(function(node){node.sourceLinks.sort(ascendingTargetDepth);node.targetLinks.sort(ascendingSourceDepth);});nodes.forEach(function(node){var sy=0,ty=0;node.sourceLinks.forEach(function(link){link.sy=sy;sy+=link.dy;});node.targetLinks.forEach(function(link){link.ty=ty;ty+=link.dy;});});function ascendingSourceDepth(a,b){return a.source.x-b.source.x;}
function ascendingTargetDepth(a,b){return a.target.x-b.target.x;}}
function center(node){return node.y+node.dy/2;}
function value(link){return link.value;}
return sankey;};